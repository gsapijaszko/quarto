{
  "hash": "ddea6fb82a28589901c37e04da4bd6cc",
  "result": {
    "markdown": "---\ntitle: \"Smoothing of water areas of DTM using ALS points\"\nauthor: \"Grzegorz Sapijaszko\"\ndate: \"2022-11-13\"\ncategories: [R, DTM, smoothing, delineate, LIDAR, ALS]\nbibliography: ../../references.bib\nimage: \"images/dtm_after_smoothing.png\"\ndraft: false\nexecute: \n  eval: false\n---\n\n::: {.cell}\n\n:::\n\n\nWhen creating a Digital Terrain Models from LIDAR data, there are discontinuities (absence) of points over areas with water. Algorithms try to approximate missing points, but the result is generally inaccurate. In the case of the method based on triangular irregular network (TIN), such areas are usually represented by relatively large triangles (see @fig-dtm). Below is a method to smooth out such areas.\n\nMy idea was to find a water areas with help of `lidRplugins::delineate_lakes()`, calculate the `mean` (or `min`) values and merge it with original DTM file. The workflow is shown on @fig-alorithm:\n\n\n\n::: {.cell}\n::: {#fig-alorithm .cell-output-display}\n```{=html}\n<div id=\"htmlwidget-e33d5f8d37cd8be00669\" style=\"width:100%;height:464px;\" class=\"DiagrammeR html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e33d5f8d37cd8be00669\">{\"x\":{\"diagram\":\"graph TB;\\n A(LAS catalog)-->R(r, DTM, r); \\n A --> L(l, delineated areas, v)\\n A --> V(v, water areas, v)\\n L --> i[intersects]\\n V --> i\\n i-->W(w, delineated water only, v);\\n R-->al[get mean value from water areas and bind to vector]\\n al-->W;\\n W-->RA[ra, rasterize it, r];\\n RA-->RB(rb, substitute with mean water altitude, r);\\n R-->RB\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nAlgorithm for smoothing the water surface areas over DTM; r - rasters, v - vectors\n:::\n:::\n\n\nLet's read the DTM already crated. It's shown on @fig-dtm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- terra::vrt(\"data/dtm/rasterize_terrain.vrt\")\n```\n:::\n\n\n![DTM obtained from LAS with `rasterize_terrain()` function.](images/dtm_before_smoothing.png){#fig-dtm}\n\nTo find and delineate/vectorize the water areas we will use `delineate_lakes()` function from `lidRplugins` package [@R-lidRplugins]. In result we will get a vector layer with areas of similar altitude. The `tol` and `tol2` parameters are used to set the tolerances.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- lidR::readLAScatalog(\"data/las/\") |>\n  lidRplugins::delineate_lakes(tol = 1/1000, tol2 = c(1/10^6, 2/10^4)) |>\n  terra::vect(l) |>\n  terra::project(terra::crs(r))\n```\n:::\n\n\nAs the output of `delineate_lakes()` can contain the flat terrain areas as well, we will filter out just water (`-keep_class 9`) points from `LAScatalog`, rasterize them and convert raster to polygon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- lidR::readLAScatalog(\"data/las/\", filter = \"-keep_class 9\") |>\n  lidR::rasterize_density() |>\n  terra::as.polygons() |>\n  terra::subset(density > 0, NSE = TRUE) |>\n  terra::project(terra::crs(r))\n```\n:::\n\nNow, having two polygons: 1st with delineated areas, and 2 only with water areas, lets intersect them to have only delineated water:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- l |>\n  subset(terra::is.related(l, v, relation = \"intersects\"))\n```\n:::\n\n\nNow we are going to extract the `mean` (or you can use any other function) values of altitude for the vector areas and bind it to our vector layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- terra::extract(r, w, fun=min, bind = TRUE, na.rm=TRUE)\nw <- setNames(w, \"mean_height\")\nterra::writeVector(w, \"data/w.gpkg\", overwrite = TRUE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nterra::plot(r, col = grDevices::gray.colors(50))\nterra::plot(w, add = TRUE)\n```\n\n::: {.cell-output-display}\n![DTM with vectorized water](index_files/figure-html/fig-raster-water-plot-1.png){#fig-raster-water-plot width=672}\n:::\n:::\n\n\nAnd finally produce the output raster:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nra <- r\nra[] <- NA\nra <- terra::rasterize(w,ra, field = w$mean_height)\n\nindx <- !is.na(ra)\nrb <- r\nrb[indx] <- ra[indx]\nterra::writeRaster(rb, file = \"data/rb.tif\", overwrite = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Raster layer with rasterized aggregaded values for water areas](index_files/figure-html/fig-output-raster-1.png){#fig-output-raster width=672}\n:::\n:::\n\n\n\n![DTM with smoothed water areas.](images/dtm_after_smoothing.png){#fig-dtm-after}\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/d3-3.3.8/d3.min.js\"></script>\n<script src=\"../../site_libs/dagre-0.4.0/dagre-d3.min.js\"></script>\n<link href=\"../../site_libs/mermaid-0.3.0/dist/mermaid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/mermaid-0.3.0/dist/mermaid.slim.min.js\"></script>\n<link href=\"../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/chromatography-0.1/chromatography.js\"></script>\n<script src=\"../../site_libs/DiagrammeR-binding-1.0.9.9000/DiagrammeR.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}