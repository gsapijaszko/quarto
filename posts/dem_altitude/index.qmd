---
title: "Where to find altitude for my coordinates?"
author: "Grzegorz Sapijaszko"
date: "2022-10-02"
categories: [R, OpenData, DEM]
bibliography: ../../references.bib
image: "image.jpg"
draft: false
---

```{r}
#| label: prep
#| echo: false
#| output: false
#| eval: true

if(!dir.exists("data")) { dir.create("data") }
library(r2symbols)
```

## Introduction

<!--
Topography, or local relief, is one of the main factors controlling processes taking place in the near-surface layer of the Earth, it's also a soil forming factor. Many of the differences in soils that vary with topography are due to combination of microclimate, pedogenesis, and geological processes. Soil properties vary with topography. One reason for this is the orientation of the hill slopes on which soils form; this affects the microclimate, the soil and vegetation in that area. Another is the steepness of the slope; this affects soil properties because the rates of surface-water runoff and erosion vary with slope [@birkelandSoilsGeomorphology1984; @schaetzlSoilsGenesisGeomorphology2005].
-->

[Looking for a DEM elevation model for entire UK - not in tile form](https://opendata.stackexchange.com/questions/20498/looking-for-a-dem-elevation-model-for-entire-uk-not-in-tile-form) is the query on Open Data StackExchange that prompted this post. The initial question was:

> I need to calculate the elevation of 1600 survey plots covering all of the UK - I have these formatted as a point shapefile. I have looked at the OS50 dataset but this is only available as tiles and it would take forever to process each tile individually - my points cover the entire country. Is there free-to-use raster elevation data anywhere that is not split into many tiles?

Let's review, where to look for Open Source data or what other options we have.

## Sources of data for Digital Terrain Models

On the global scale there are few sources available, including:

-   SRTM90, SRTM30
-   TanDEM-X

Nasa held the SRTM\index{SRTM} (Shuttle Radar Topography Mission) in 2000. The first set of data was released in 2005, however the regions outside the United States were sampled at 3 arc-seconds, which is 1/1200th of a degree of latitude and longitude, or roughly 90 meters on equator [@farrShuttleRadarTopography2007]. In 2014 NASA released brand-new dataset with a resolution of 1 arc-second, or roughly 30 meters. [Earth Explorer](http://earthexplorer.usgs.gov/) provides the data.

TanDEM-X\index{TanDEM-X} (TerraSAR-X add-on for Digital Elevation Measurements) data produced by SAR interferometry was acquired in January 2015; the production of the global DEM was completed in September 2016. The absolute height error is with about 1~m. The TanDEM-X 90m DEM publicly available has a pixel spacing of 3 arc-seconds, similar to SRTM90. It covers with 150 Mio sqkm all Earth's landmasses from pole to pole. More information and data available from [EOC Geoservice](https://geoservice.dlr.de/web/dataguide/tdm90/) portal.

For the Europe, there is a set released by Copernicus Programme named EU-DEM v1.0 (or v1.1) --- it's a digital surface model (DSM)[^1] of European Econemic Area countries. It is a hybrid product based on SRTM and ASTER GDEM data fused by a weighted averaging approach. Detailed description of the dataset and links for download are available under [their portal](https://land.copernicus.eu/imagery-in-situ/eu-dem).

[^1]: Digital Surface Model, not Digital Terrain Model!

All of the above models are characterized by a spatial resolution of 30/90 meters. If more accurate data is needed, look for national sites, where you can download (or buy) the dataset. A few examples below.

-   Czech Republic: You can find (and buy) Digital Terrain Model of the Czech Republic of the 4th (and 5th) generation on Czech Office for Surveying, Mapping and Cadastre (ČÚZK) portal[^2]. As Open Data it provides Data50 set which has been derived from a cartographic database for Base map CR 1 : 50 000 and it is totally comprised of 8 thematic groups. Data are provided as open data in SHP data format.

-   Germany: Federal Agency for Cartography and Geodesy[^3] provides DEM in 200 m raster (Open Data), however several constituent states provides the data in much better resolution.

-   Slovakia: Geodesy, Cartography and Cadastre Authority of the Slovak Republic (ÚGKK SR) provides access to DTM data through their portal[^4] - you can either order the whole set of data or download a small set at once.

-   Poland: All data available through Head Office of Geodesy and Cartography geoportal.[^5] DEMs are available as rasters of resolution 1 or 5 m (Open Data).

[^2]: <https://geoportal.cuzk.cz/>

[^3]: <https://www.bkg.bund.de>

[^4]: <https://www.geoportal.sk/en/zbgis/als_dmr/>

[^5]: <http://www.geoportal.gov.pl>

## Raster processing

Let's acquire and process the data. For raster manipulation we will use `terra` package [@R-terra], for overall management of spatial features --- package `sf` [@sf2018].

```{r}
#| label: setup
#| output: false
library(terra)
library(sf)
```

### SRTM

To download the SRTM rasters we can use one of `elevation_` functions from `geodata` package [@R-geodata].

```{r}
#| label: ele
#| message: false
#| error: false

ele <- geodata::elevation_30s("United Kingdom", path = "data")
terra::plot(ele)
```

`elevation_30s()` function returns an aggregated data with spatial resolution about 1 km (30 arc seconds). The data was prepared based on SRTM 90 m and supplemented with the GTOP30 data for latitudes greater than 60 degrees.

#### Species occurence data

Going back to original question:

> I need to calculate the elevation of 1600 survey plots covering all of the UK - I have these formatted as a point shapefile.

Let's prepare a sample occurrence data for one of the species in UK from GBIF database using `rgbif` package [@R-rgbif].

```{r}
#| label: rgbif
#| output: true

occ <- rgbif::occ_data(
  scientificName = "Calystegia pulchra", 
  country = "GB", 
  hasCoordinate = TRUE
  )

occ <- head(occ$data, 20) |>
  sf::st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs = terra::crs(ele)) |>
  subset(select = c("key", "scientificName"))
```

Let's add the observations to the plot:

```{r}
#| label: ele_plot
#| echo: true
#| output: true
terra::plot(ele, main = "Sample of C. pulchra distribution in UK")
occ |>
  sf::st_geometry() |>
  plot(add = TRUE)
```

Having our sample data prepared, which is class of `r class(occ)` we can add the elevation to the set using `extract()` function form `terra`. Function `extract()` requires an object of class SpatVector

```{r}
#| label: elevation_extract
#| message: true
occ |>
  dplyr::mutate(elevation = terra::extract(ele, terra::vect(geometry))$GBR_elv_msk) |>
  head(5)
```

Points with no value (`elevation = NaN`) may be caused by inaccuracy or rounding of coordinates when data is anonymized by GBIF. And in fact, if we checked the fourth point, it would turn out to be at sea. All other elevations are given in meters.

Let's try more accurate data, with 3 arcs sec resolution, for UK. Function `elevation_3s(lon, lat, ...)` from `geodata` will help to acquire all necessary tiles. To get the `lon` and `lat` parameters we will download the UK boundaries and check the bounding box.

```{r}
#| label: elevation_3s
#| error: true
uk <- geodata::gadm("United Kingdom", path = "data") |>
  terra::project(terra::crs(ele))

bbox <- sf::st_bbox(uk)
bbox

for (x in floor(bbox[1]):ceiling(bbox[3])) {
  for (y in floor(bbox[2]):ceiling(bbox[4])) {
    geodata::elevation_3s(lon = x, lat = y, path = "data")
  }
}
```

Hmm... In fact the boundaries of UK exceed the 60`r r2symbols::sym("degree")` N, so, let's modify our loop (we sacrificed the Shetland Islands, sorry):

```{r}
#| label: elevation_60
for (x in floor(bbox[1]):ceiling(bbox[3])) {
  for (y in floor(bbox[2]):60) {
    geodata::elevation_3s(lon = x, lat = y, path = "data")
  }
}
```

Having all files downloaded we can build an virtual raster and work with it:

```{r}
#| label: virtual_srtm

r <- list.files(path = "data", pattern = "srtm_.+.tif", full.names = TRUE)
vrt <- terra::vrt(r, "data/vrt.vrt", overwrite = TRUE) |>
  crop(uk) |>
  mask(uk)
terra::plot(vrt)
```

Let's extract the elevation from our more accurate rasters:

```{r}
#| label: occ_elevation_2
occ |>
  dplyr::mutate(ele_30s = terra::extract(ele, terra::vect(geometry))$GBR_elv_msk) |>
  dplyr::mutate(ele_3s = terra::extract(vrt, terra::vect(geometry))$vrt) |>
  head(5)
```

We got quite similar results regardless of resolution. On the other hand, if the your plots are located in mountainous region --- the higher the raster resolution, the better.

### TanDEM-X
[The original package is a bit outdated, and you have to change baseurl variable in `download_TanDEM()` function. There is [my fork](https://github.com/gsapijaszko/TanDEM-R) already.]{.aside}

TanDEM data is available from [https://download.geoservice.dlr.de/TDM90/](https://download.geoservice.dlr.de/TDM90/) service. To download the neccessary data we will use `TanDEM` package [@R-TanDEM] available on [GitHub](https://github.com/meteosimon/TanDEM-R).

Please remember to set up the keyring with your user name, like:

```{r}
#| eval: false
keyring::key_set(service = "geoservice.dlr", username = "grzegorz.sapijaszko@gmail.com")
```

```{r}
#| label: tandem
#| eval: false
#| message: false
if(!dir.exists("data/tandem")) { dir.create("data/tandem") }
TanDEM::download_TanDEM(
  lon = c(bbox[1], bbox[3]),
  lat = c(bbox[2], bbox[4]),
  usr = "grzegorz.sapijaszko@gmail.com",
  srv = "geoservice.dlr",
  dstdir = "data/tandem"
)
```
In next step we will build virtual raster and assign `NA` for cells with no data:

```{r}
#| label: tandem_vrt
r <- list.files(path = "data/tandem/", pattern = "TDM1_.+.tif", full.names = TRUE)
tandem <- terra::vrt(r, "data/tandem/vrt.vrt", overwrite = TRUE) 

terra::NAflag(tandem) <- -32767
```

```{r}
#| label: tandem_plot
#| eval: false
#| output: false
#| 
tandem <- tandem |>
  terra::mask(uk) |>
  terra::crop(uk)
terra::plot(tandem)
```

Finally, we can extract elevations:

```{r}
#| label: occ_elevation_3
occ |>
  dplyr::mutate(ele_tandem = terra::extract(tandem, terra::vect(geometry))$vrt) |>
  head(5)
```

### Copernicus data

The original EU-DEM v1.0 (or v1.1) data can be accessed from [copernicus.eu](https://land.copernicus.eu/imagery-in-situ/eu-dem) portal. It's divided in 10x10 degree tiles, which results in quite huge files (up to 5 GB per tile). The similar data set, in smaller tiles is available from [AWS Opendata Registry](https://registry.opendata.aws/copernicus-dem/). Details in [readme](https://copernicus-dem-30m.s3.amazonaws.com/readme.html). This set can be downloaded by `CopernicusDEM` package [@R-CopernicusDEM]. Please note, that this dataset is a Digital Surface Model, where elevation measurements represent the surface of the Earth including buildings and infrastructure.

```{r}
#| label: copernicus
#| eval: false
#| echo: true
library(CopernicusDEM)

polygon <- sf::st_as_sf(uk)
sf::sf_use_s2(use_s2 = FALSE)

if(!dir.exists("data/copernicus")) { dir.create("data/copernicus")}

aoi_geom_save_tif_matches(
  sf_or_file = polygon,
  dir_save_tifs = "data/copernicus",
  resolution = 30,
  crs_value = 4326,
  threads = parallel::detectCores(),
  verbose = TRUE
)
```

```{r}
#| label: copernicus_vrl

r <- list.files(path = "data/copernicus/", pattern = "Copernicus_.+.tif", full.names = TRUE)
cop <- terra::vrt(r, "data/copernicus/vrt.vrt", overwrite = TRUE) 

occ |>
  dplyr::mutate(ele_cop = terra::extract(cop, terra::vect(geometry))$vrt) |>
  head(5)

```

### ElevatR - the black horse

As the name suggests, `elevatr` is a package [@R-elevatr] to access elevation data from various sources. With `get_elev_point()` function obtaining the elevation is as simple as:

```{r}
#| label: elevatr

occ |>
  dplyr::mutate(ele_aws = elevatr::get_elev_point(geometry, src = "aws")$elevation) |>
  head(5)
```

TBC...

```{r}
#| label: write_bibliography
#| echo: false
#| include: false
#| eval: false
packages <- c("terra", "geodata", "rgbif", "CopernicusDEM", "TanDEM", "keyring", "elevatr")
knitr::write_bib(packages, file = "../../packages.bib")
```
